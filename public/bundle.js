(()=>{"use strict";var e={896:(e,t,l)=>{l(164),l(264)},543:(e,t,l)=>{l.d(t,{Z:()=>s}),l(261),l(164);const s=class{constructor(){this.board=new Board,this.whitePieces=[],this.blackPieces=[],this.currentTurn="white",this.squares=document.querySelectorAll(".chess-square")}startNewGame(){this.setupEventListeners(),this.checkGameOver()?alert("The game is already over. Please start a new game."):(this.board.grid=[[{color:"white",type:"rook"},{color:"white",type:"knight"},{color:"white",type:"bishop"},{color:"white",type:"queen"},{color:"white",type:"king"},{color:"white",type:"bishop"},{color:"white",type:"knight"},{color:"white",type:"rook"}],[{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"}],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"}],[{color:"black",type:"rook"},{color:"black",type:"knight"},{color:"black",type:"bishop"},{color:"black",type:"queen"},{color:"black",type:"king"},{color:"black",type:"bishop"},{color:"black",type:"knight"},{color:"black",type:"rook"}]],this.whiteTurn=!0,this.selectedPiece=null,this.checkGameOver=()=>{},squares.forEach((e=>e.innerHTML="")),this.board.placePieces())}handleMove(e,t,l,s){}isCheckmate(e){}setupEventListeners(){const e=document.querySelectorAll(".chess-square"),t=document.querySelectorAll(".chess-piece");e.forEach((e=>{e.addEventListener("click",(e=>{highlightSquare(e.target)}))})),t.forEach((e=>{e.addEventListener("click",(e=>{}))}))}highlightSquare(e){if(e.children.length>0){const t=e.children[0];(this.isWhiteTurn&&t.classList.contains("white")||!this.isWhiteTurn&&t.classList.contains("black"))&&(this.selectedPiece&&this.selectedPiece.classList.remove("highlight"),e.classList.add("highlight"),this.selectedPiece=e,console.log(piece))}}}},164:(e,t,l)=>{var s=l(261),r=l(543);new s.Z,new r.Z,chessPiece},261:(e,t,l)=>{l.d(t,{Z:()=>n});var s={};l.r(s),l.d(s,{Z:()=>o});var r=l(264);new n,new r.Z;const o=chessPiece;class i{constructor(){this.squareElements=new Array(8).fill().map((()=>new Array(8).fill(null))),this.grid=[["R","N","B","Q","K","B","N","R"],["P","P","P","P","P","P","P","P"],[" "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "],["p","p","p","p","p","p","p","p"],["r","n","b","q","k","b","n","r"]];for(let e=0;e<8;e++)for(let t=0;t<8;t++)document.getElementById(`square-${e}-${t}`)&&(squareElements[e][t]=document.getElementById(`square-${e}-${t}`));document.addEventListener("DOMContentLoaded",(function(e){(0,s.createElements)(),new i})),console.log(squareElements),this.chessPieces=[],this.placePieces(),this.createBoard(),this.displayBoard(),this.updateGameState();for(let e=0;e<8;e++)for(let t=0;t<8;t++){const l=this.grid[e][t];if(" "!==l){l.toLowerCase();const s=l.toLowerCase();s.charAt(0).toUpperCase(),s.slice(1),squareElements[e][t]}}this.addEventListeners(),this.handleClick=this.handleClick.bind(this)}handleClick(e){console.log(e)}handleSquareClick(e){if(!currentlySelectedPiece)return;const t=parseInt(event.target.dataset.row),l=parseInt(event.target.dataset.col),s=parseInt(currentlySelectedPiece.parentElement.dataset.row),r=parseInt(currentlySelectedPiece.parentElement.dataset.col);board.movePiece(s,r,t,l)&&(this.isWhiteTurn=!this.isWhiteTurn),currentlySelectedPiece=null}placePieces(){for(let e=0;e<8;e++)for(let t=0;t<8;t++){const l=this.grid[e][t];if(" "!==l){const s=l===l.toLowerCase()?"black":"white",r=l.toLowerCase(),o=`images/${s}${r.charAt(0).toUpperCase()}${r.slice(1)}.png`,i=squareElements[e][t];this.pieces.push(new Piece(r,s,e,t,o,i))}}}getPiece(e,t){return e<0||e>7||t<0||t>7?null:this.pieces[e][t]}movePiece(e,t){const l=e.parentElement;t&&t.classList.contains("chess-square")?l&&l.classList.contains("chess-square")?this.isLegalMove(e,l,t)?this.isValidMove(e,l,t)?(t.firstElementChild?this.playCaptureSound():this.playMoveSound(),t.appendChild(e),l.innerHTML="",this.updateGameState(e,t)):console.error("Error: Invalid move"):console.error("Error: Illegal move"):console.error("Error: Current square is invalid"):console.error("Error: Destination square is invalid")}createBoardElements(){this.squareElements=[];for(let e=0;e<8;e++){this.squareElements[e]=[];for(let t=0;t<8;t++)this.squareElements[e][t]=document.getElementById(`${e}-${t}`)}this.createBoard(),this.displayBoard()}isCheckmate(e){}isDraw(){return 1==getNumWhitePieces()&&1==getNumBlackPieces()||2==getNumWhitePieces()&&2==getNumBlackPieces()&&1==getNumWhiteBishops()&&1==getNumBlackBishops()}getNumBlackBishops(){for(let e=0;e<this.board.length;e++){for(let t=0;t<this.board[e].length;t++)this.board[e][t];return numWhitePieces}}getNumWhiteBishops(){for(let e=0;e<this.board.length;e++){for(let t=0;t<this.board[e].length;t++)"B"===this.board[e][t]&&getNumBlackPieces++;return numWhitePieces}}getNumBlackPieces(){for(let e=0;e<this.board.length;e++)for(let t=0;t<this.board[e].length;t++)this.board[e][t];return numWhitePieces}getNumWhitePieces(){let e=0;for(let t=0;t<this.board.length;t++)for(let l=0;l<this.board[t].length;l++)"W"===this.board[t][l]&&e++;return e}generateBoardHTML(){let e="";for(let t=0;t<8;t++)for(let l=0;l<8;l++){e+=`<div class="chess-square ${(t+l)%2==0?"white":"black"}" id="square-${t}-${l}"></div>`;const s=this.pieces.find((e=>e.position.row===t&&e.position.col===l));s&&(e+=`<div class="chess-piece ${s.color}-${s.type}" id="piece-${t}-${l}"></div>`)}document.getElementById("chessboard").innerHTML=e}createBoard(){this.squareElements=[];for(let e=0;e<8;e++){this.squareElements[e]=[];for(let t=0;t<8;t++){const l=document.createElement("div");l.classList.add("chess-square-"+((e+t)%2==0?"white":"black")),l.dataset.row=e,l.dataset.col=t,this.squareElements[e][t]=l;const s=this.grid[e][t];if(" "!==s){const r=s===s.toUpperCase()?"white":"black",i=`images/${r}${s.toUpperCase()}.png`,n=new o(s,r,e,t,i,l);this.pieces.push(n),l.appendChild(n.element)}l.addEventListener("click",(e=>{this.handleSquareClick(e.target)})),document.getElementById("chessboard").appendChild(l)}}}displayBoard(){const e=document.getElementById("chessboard");e.innerHTML="";for(let t=0;t<8;t++)for(let l=0;l<8;l++)if(this.getPiece(t,l)){const s=document.createElement("div");s.classList.add("chess-square "+((t+l)%2==0?"white":"black")),e.appendChild(s)}}addEventListeners(){document.querySelectorAll(".chess-square").forEach((e=>{e.addEventListener("click",(e=>{this.handleSquareClick(e)}))}))}}const n=i},264:(e,t,l)=>{l.d(t,{Z:()=>s}),l(261);const s=class{constructor(){this.board=new Board,this.whitePieces=[],this.blackPieces=[],this.currentTurn="white",this.squares=document.querySelectorAll(".chess-square")}startNewGame(){this.setupEventListeners(),this.checkGameOver()?alert("The game is already over. Please start a new game."):(this.board.grid=[[{color:"white",type:"rook"},{color:"white",type:"knight"},{color:"white",type:"bishop"},{color:"white",type:"queen"},{color:"white",type:"king"},{color:"white",type:"bishop"},{color:"white",type:"knight"},{color:"white",type:"rook"}],[{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"},{color:"white",type:"pawn"}],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"},{color:"black",type:"pawn"}],[{color:"black",type:"rook"},{color:"black",type:"knight"},{color:"black",type:"bishop"},{color:"black",type:"queen"},{color:"black",type:"king"},{color:"black",type:"bishop"},{color:"black",type:"knight"},{color:"black",type:"rook"}]],this.whiteTurn=!0,this.selectedPiece=null,this.checkGameOver=()=>{},squares.forEach((e=>e.innerHTML="")),this.board.placePieces())}handleMove(e,t,l,s){}isCheckmate(e){}setupEventListeners(){const e=document.querySelectorAll(".chess-square"),t=document.querySelectorAll(".chess-piece");e.forEach((e=>{e.addEventListener("click",(e=>{highlightSquare(e.target)}))})),t.forEach((e=>{e.addEventListener("click",(e=>{}))}))}highlightSquare(e){if(e.children.length>0){const t=e.children[0];(this.isWhiteTurn&&t.classList.contains("white")||!this.isWhiteTurn&&t.classList.contains("black"))&&(this.selectedPiece&&this.selectedPiece.classList.remove("highlight"),e.classList.add("highlight"),this.selectedPiece=e,console.log(piece))}}}}},t={};function l(s){var r=t[s];if(void 0!==r)return r.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,l),o.exports}l.d=(e,t)=>{for(var s in t)l.o(t,s)&&!l.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l(164),l(543),l(896)})();