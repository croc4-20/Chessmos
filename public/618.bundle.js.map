{"version":3,"file":"618.bundle.js","mappings":"y4BAAqB,IACAA,EAAU,WAS5B,O,EAPD,SAAAA,EAAYC,EAAMC,I,4FAClBC,CAAA,KAAAH,GACEI,KAAKC,WAAa,CAAC,OAAQ,SAAU,SAAU,OAAQ,QAAS,QAChED,KAAKE,YAAc,CAAC,QAAS,SAC7BF,KAAKG,OAAS,GACdH,KAAKH,KAAOA,EACZG,KAAKF,WAAaA,CACpB,G,EAAC,EAAAM,IAAA,mBAAAC,MAEH,WACI,IAAMC,EAAeC,SAASC,eAAe,SAE7C,OADmB,IAAIR,KAAKF,WAAWE,KAAKH,KAAMS,EAEpD,GAAC,CAAAF,IAAA,eAAAC,MAED,SAAaR,GACX,IASkCY,EAT5BC,EACN,CACEC,MAAO,CAAC,EAAG,GACXC,MAAO,CAAC,EAAG,IAGPC,EAAa,CAAC,OAAQ,SAAU,SAAU,QAAS,OAAQ,SAAU,SAAU,QACzCC,GAAzBd,KAAKe,mB,64BAAoBC,CAE1BhB,KAAKE,cAAW,IAAlC,IAAAY,EAAAG,MAAAR,EAAAK,EAAAI,KAAAC,MAAoC,CAClC,IADkC,IAA3BC,EAAKX,EAAAJ,MACHgB,EAAI,EAAGA,EAAIR,EAAWS,OAAQD,IAAK,CAC1C,IAAME,EAAOV,EAAWQ,GAClBG,EAAMd,EAAaU,GAAO,GAC1BK,EAAMJ,EACNK,EAAY,UAAHC,OAAaP,EAAMQ,cAAa,KAAAD,OAAIJ,EAAKK,cAAa,QAGtE,OAAQL,GACR,IAAK,OACL,IAAK,SACL,IAAK,SACL,IAAK,QACL,IAAK,OACL,IAAK,OACc,IAAIM,WAAWN,EAAMH,EAAOI,EAAKC,EAAKC,EAAW,KAAM1B,KAAKH,MAC9E,MACF,QACE,MAAM,IAAIiC,MAAM,uBAADH,OAAwBJ,IAEvCvB,KAAKG,OAAO4B,UAdC,EAef,CAGA,IADA,IAAMP,EAAMd,EAAaU,GAAO,GACvBC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMK,EAAY,UAAHC,OAAaP,EAAMQ,cAAa,aACzCI,EAAa,IAAIH,WAAW,OAAQT,EAAOI,EAAKH,EAAGK,EAAW,KAAM1B,KAAKH,MAC/EG,KAAKG,OAAO4B,KAAKC,EACnB,CACF,CAAC,OAAAC,GAAAnB,EAAAoB,EAAAD,EAAA,SAAAnB,EAAAqB,GAAA,CACH,M,6EAAC,CAzD4B,E","sources":["webpack://chessmos/./jsFiles/classArray.js"],"sourcesContent":["let createChessBoard;\r\nexport default class ChessArray \r\n{\r\n  constructor(game, ChessBoard) \r\n  {\r\n    this.pieceTypes = ['pawn', 'knight', 'bishop', 'rook', 'queen', 'king'];\r\n    this.pieceColors = ['white', 'black'];\r\n    this.pieces = [];\r\n    this.game = game;\r\n    this.ChessBoard = ChessBoard;\r\n  }\r\n\r\ncreateChessBoard() {\r\n    const boardElement = document.getElementById('board');\r\n    const chessBoard = new this.ChessBoard(this.game, boardElement);\r\n    return chessBoard;\r\n  }\r\n  \r\n  createPieces(game) {\r\n    const startingRows = \r\n    {\r\n      white: [0, 1],\r\n      black: [6, 7]\r\n    };\r\n\r\n    const pieceOrder = ['rook', 'knight', 'bishop', 'queen', 'king', 'bishop', 'knight', 'rook']; // Order of pieces on the board\r\n    const chessBoard = this.createChessBoard(); // Create a ChessBoard instance\r\n    \r\n    for (let color of this.pieceColors) {\r\n      for (let i = 0; i < pieceOrder.length; i++) {\r\n        const type = pieceOrder[i];\r\n        const row = startingRows[color][0];\r\n        const col = i;\r\n        const imagePath = `images/${color.toUpperCase()}_${type.toUpperCase()}.png`;\r\n       let chessPiece;\r\n\r\n       switch (type) {\r\n       case 'rook':\r\n       case 'knight':\r\n       case 'bishop':\r\n       case 'queen':\r\n       case 'king':\r\n       case 'pawn':\r\n       const chessPiece = new ChessPiece(type, color, row, col, imagePath, null, this.game);\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid piece type: ${type}`);\r\n      }\r\n        this.pieces.push(chessPiece);\r\n      }\r\n        // Add pawns to the board\r\n      const row = startingRows[color][1];\r\n      for (let i = 0; i < 8; i++) {\r\n        const imagePath = `images/${color.toUpperCase()}_PAWN.png`;\r\n        const chessPiece = new ChessPiece('pawn', color, row, i, imagePath, null, this.game);\r\n        this.pieces.push(chessPiece);\r\n      }\r\n    }\r\n  }\r\n}"],"names":["ChessArray","game","ChessBoard","_classCallCheck","this","pieceTypes","pieceColors","pieces","key","value","boardElement","document","getElementById","_step","startingRows","white","black","pieceOrder","_iterator","createChessBoard","_createForOfIteratorHelper","s","n","done","color","i","length","type","row","col","imagePath","concat","toUpperCase","ChessPiece","Error","push","chessPiece","err","e","f"],"sourceRoot":""}